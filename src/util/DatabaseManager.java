package util;

import java.sql.*;

public class DatabaseManager {

    private String url;
    private Connection connection;
    private String username;
    private String password;

    public DatabaseManager(String url, String username, String password){
        this.url = url;
        this.username = username;
        this.password = password;
        connect();
    }

    private void connect(){
        try {
            Class.forName("org.postgresql.Driver");
            connection = DriverManager.getConnection(url, username, password);
            Console.println("Соединение с бд успешно установлено");
        }
        catch (ClassNotFoundException exception) {
            Console.printerr("Класс драйвера не найден!");
        }
        catch (SQLException exception) {
            Console.printerr("Подключение к дб не удалось!");
        }
    }

    public void closeConnection(){
        if (connection == null){
            return;
        }
        else{
            try{
                connection.close();
                Console.println("Соединение с бд разорвано");
            }
            catch (SQLException exception){
                Console.printerr("Не удалось разорвать связь с бд!");
            }
        }
    }

    public void stopAutoCommit(){
        try {
            if (connection == null) {
                throw new SQLException();
            }
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            Console.printerr("Не удалось остановить режим автообновления!");
        }
    }

    public void startAutoCommit(){
        try {
            if (connection == null){
                throw new SQLException();
            }
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            Console.printerr("Не удалось установить режим автообновления!");
        }
    }

    public void commit() {
        try {
            if (connection == null){
                throw new SQLException();
            }
            connection.commit();
        } catch (SQLException exception) {
            Console.printerr("Не удалось обновить бд");
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null){
                throw new SQLException();
            }
            connection.setSavepoint();
        } catch (SQLException exception) {
            Console.printerr("Произошла ошибка при сохранении состояния бд!");
        }
    }

    public void rollback(){
        try {
            if (connection == null){
                throw new SQLException();
            }
            connection.rollback();
        } catch (SQLException exception) {
            Console.printerr("Не удалось откатить состояние бд!");
        }
    }

    public PreparedStatement getStatement(String sql, boolean keys) throws SQLException{
        PreparedStatement preparedStatement;
        try {
            if (connection == null){
                throw new SQLException();
            }
            int autoGeneratedKeys = keys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys);
            return preparedStatement;
        }
        catch (SQLException exception) {
            if (connection == null){
                Console.printerr("Соединение с базой данных не установлено!");
            }
            throw new SQLException(exception);
        }

    }

    public void closeStatement(PreparedStatement statement) {
        if (statement == null){
            return;
        }
        try {
            statement.close();
            Console.println("Statement " + statement + " закрыт");
        } catch (SQLException exception) {
            Console.println("Statement " + statement + " не удалось закрыть");
        }
    }

}
